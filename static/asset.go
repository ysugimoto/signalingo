package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _etc_env_conf = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x55\x4b\x6f\xe3\x36\x10\xbe\xeb\x57\x0c\x94\x4b\x0b\x38\x4a\x76\x0b\x74\x5b\x03\x3d\x04\x45\x1f\xc1\xa6\xdb\xc5\x3a\x6d\x50\x04\x39\xd0\xd2\xc8\x22\x4c\x91\x2a\x1f\x76\xfd\xef\x3b\x33\x94\x64\xbb\x71\x1f\xa8\x7d\x90\x44\x7e\xf3\x71\x1e\xdf\x70\xae\x60\xa5\x37\x56\x19\x6d\x37\x10\xd0\xef\xd0\x03\xda\x9d\xf6\xce\xf6\x68\x63\x71\x55\x5c\xc1\x4f\x4a\x5b\x50\xc3\x60\x74\xad\xa2\x76\x76\xc2\xd5\xce\xb6\x7a\x93\xbc\x2c\x56\x02\xed\x5c\x88\x4b\x78\xd0\x21\xa2\x95\x8f\x0a\x56\x18\xe1\xfe\x23\xdc\x35\x8d\xc7\x10\xc0\x79\x68\x5c\xcf\x8c\x56\xf5\x48\x26\x83\xf3\x47\x13\xfe\xa8\xe0\x37\x97\xa0\x57\x07\xb0\x88\x0d\x84\xa8\x7c\x84\xbd\x8e\x1d\x94\x21\x35\xae\x5c\x80\x6e\xe1\x40\x90\x40\xcc\x7b\x34\xe6\x7a\x6b\xdd\x7e\xb4\x25\x42\xb4\xcd\xe0\xb4\x3d\x92\x4e\x0b\x30\xa8\xd8\x31\x22\x9a\x30\x6f\x3e\x3e\xac\xce\x08\xcb\xe8\x13\x96\x8c\xaa\xd1\xc7\x56\x1b\x5c\xc2\xb7\xf4\x06\xfc\x9a\x19\xe0\x3e\xc3\x53\x40\xa6\x5a\x40\xec\x74\x20\xe3\x5a\x92\x23\x8e\xbb\x08\xd8\x0f\xf1\x40\x34\x5b\x3c\x64\x96\xf7\x78\xf8\xbf\x24\xc5\x73\x4e\xf9\x4b\xc1\x39\x85\x6f\xa0\x7c\xf3\xf6\x5d\x75\x4b\xff\x37\x65\xc1\x71\xd3\xd2\x57\xf4\x2b\xe6\x50\x09\x72\x13\xa6\xc2\x96\x05\x9d\x40\x4b\xad\x32\x01\x8b\x29\x2e\xc6\x94\xc5\xe8\x5e\xfe\x20\x77\x9f\x70\xfd\xa3\x73\xdb\xbf\xd3\xc2\xdd\x89\x0c\x3a\xb5\xc3\x19\x2f\xc7\x2e\x40\x96\x6d\x13\x3a\xb5\x45\x4e\xe2\x63\x87\x1e\x5b\xe7\x71\x71\xa6\xa0\xe8\x95\x0d\x2d\xf1\x07\xd7\x53\x42\xbc\xab\x59\x1b\x9f\x61\xb5\xa9\x40\xa5\xd8\xd1\x71\x0c\xc5\xcf\x21\x3a\x4e\x93\xe7\x73\x4e\x19\xb2\xdc\x72\x0e\xfd\x19\xb5\xc7\x98\xbc\xa5\x54\xa6\x5a\x48\x49\x3f\x31\x05\x12\x6b\x83\xf0\xf6\xf6\x76\x41\xb2\x24\x77\xf5\x0c\xa8\xfe\x85\xa7\x55\xda\x24\x8f\xa7\x3c\x0b\xc0\x3f\x70\x88\xe7\x74\x8c\xc3\x26\xfb\x95\xbc\x59\xc2\x27\xfc\x3d\x21\x55\x8b\x3e\xaa\xb3\xbc\xed\xb5\x31\x94\x5f\xdb\x64\x5b\x3f\xe2\x44\x00\x04\xce\x5a\x1f\x94\xa7\xfe\x88\xe8\x43\xa6\x9c\xd8\xc4\x4e\x10\x1f\x7f\x5e\x3d\x02\x41\x3a\x27\xa7\x3e\xef\x71\xcd\x7c\x2f\xc5\x15\x93\x50\x3d\xbb\x18\x87\xe5\xcd\x8d\x71\xb5\x32\xac\x9b\x1b\xde\x96\x22\x3f\xb8\xcd\x26\x37\x7c\x8c\xf4\x7c\x55\x59\x97\xe2\x90\x62\x00\xe3\x36\x01\xa8\x55\x8d\xf2\x1b\x04\x9b\xfa\x75\xf6\x47\x9a\xda\x8c\x24\x06\x77\x68\x80\x8a\xce\x2b\x10\x0f\x03\xe5\x87\xdf\x02\xcb\x83\xb5\xc5\x7a\xa7\xe8\x54\xe4\x34\xa1\x55\x6b\x92\x1b\x95\x75\xef\x75\xa4\xda\xa3\xef\x75\x08\x73\x49\xd9\x7e\x39\x3b\xc8\x5f\x95\xf4\x49\xad\xac\xf4\xe7\x4e\x19\xca\x03\xac\xd1\xb8\xfd\x92\xf0\xf9\x77\x4d\xe5\x69\xc8\x6b\x10\xd3\xd9\x7f\x3a\x25\xaf\x2f\x72\x7d\xe9\xc6\x0a\xce\x88\x30\x27\x3b\x11\x3f\xbc\xb6\xe3\x75\xb9\x18\xa4\x41\xb9\x34\x39\x32\xf6\xa5\x4f\x52\x08\xba\x2c\xa6\xf0\xca\xa9\x73\x99\x7a\x5a\xcc\x9c\x73\x1a\xc6\xbe\xff\xc0\x97\xda\x85\xd8\x73\x1e\x8f\xa1\xcb\xe7\x7f\x8b\x5d\x91\x9e\x38\x84\x3b\x7a\x72\xc9\xce\xe2\x53\x51\x19\xda\xfb\x5e\x9e\xc9\x36\xd4\x74\x7f\xc5\xec\x95\xb7\x6c\xff\x44\x4f\x3e\xfa\x32\x4a\xdb\xd6\x31\xea\x9e\x9e\xbe\xcf\x42\xb9\x8c\xb4\xce\x22\x23\x3f\xb8\x69\xab\x78\xa6\x97\x97\x82\x53\xc8\xca\xcc\x45\x29\x8b\x59\x1d\x7c\x5d\xc5\x7e\x38\x5e\x59\x15\xe1\xcb\x22\x4b\x8b\x36\xf9\x6c\x51\xee\x2a\x3a\xaf\x48\x8b\x8f\xc4\xf4\x4a\xb6\xbd\xb2\xb4\xc7\x3d\x6a\x2d\xd6\x12\x49\xe0\x3b\x06\x25\xc7\xe2\xe2\x77\xb3\xfc\xb8\xae\x72\xfb\x84\x91\x92\x9d\x0b\x27\x1a\x5c\x9d\xac\x9f\x66\xbb\xc7\xde\xf9\x03\x85\xf7\x0b\x91\x87\xf1\xd0\xb1\x27\x7f\x70\x46\xd1\xb1\xeb\xa4\x0d\x35\x16\xed\x0d\xa7\x79\xf1\xd8\x90\x8e\x2e\x5b\x7e\x92\xbd\xf7\xbf\xae\x26\x7f\xe6\x1b\x8e\x1d\xcd\x96\xe3\x4e\x16\xa1\x0c\x47\x16\x38\x09\xe3\x59\xf6\x5f\xe6\xf1\xc1\xcd\x98\xe7\xa6\x6c\x5c\xe7\xcb\x5c\xe6\x48\xa6\x38\x96\x22\x47\x23\xb9\xcd\x2e\x9c\xde\x09\xd3\xca\x34\xee\xed\xc8\x2f\x53\x88\x0f\x19\x67\xee\x3c\xf9\xb3\xc1\xa5\xc1\x3f\x4f\xfa\x0c\xc9\x83\xbe\xc1\x56\x25\xc3\x93\x65\x8c\xe0\x1f\xe6\xdb\x97\x5f\xbc\xfb\xba\xf8\x33\x00\x00\xff\xff\x3f\x15\xda\x1c\xae\x08\x00\x00")

func etc_env_conf_bytes() ([]byte, error) {
	return bindata_read(
		_etc_env_conf,
		"etc/env.conf",
	)
}

func etc_env_conf() (*asset, error) {
	bytes, err := etc_env_conf_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "etc/env.conf", size: 2222, mode: os.FileMode(420), modTime: time.Unix(1423956862, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _public_playground_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x56\x41\x6f\xdb\x3a\x0c\xbe\xf7\x57\xa8\x3a\x3c\xb8\x78\xef\xd9\xc5\xb0\x43\x91\xc6\x19\xb0\xae\x03\x06\x6c\xbb\xa4\xc3\xce\x8a\xc4\xc4\x5a\x15\x49\x93\x68\xa7\xc1\xd0\xff\x3e\xc9\x76\x1a\x27\x51\xdd\x6d\xb7\xe9\x90\x28\xa4\xf8\x91\xfc\x48\x51\x99\x9e\x0b\xc3\x71\x6b\x81\x54\xb8\x56\xb3\xb3\x69\xf7\x45\xc2\x9a\x56\xc0\x44\xb7\x6d\x7f\xae\x01\x19\xe1\x15\x73\x1e\xb0\xa4\x5f\xee\xde\xff\x7f\x45\x07\x6a\x94\xa8\x60\x36\x97\x2b\xcd\x94\xd4\x2b\x72\x07\x1e\xa7\x45\x27\xdd\x9f\xf2\xb8\x55\x40\xa2\xc3\x92\x22\x3c\x60\xc1\xbd\x1f\xa0\xc4\x95\x6f\x1c\xb3\x16\x1c\xf9\x71\x20\x8e\xab\x02\xb9\xaa\x70\x42\x5e\x5f\x5e\xda\x87\xeb\x13\xb5\x65\x42\x04\xd7\x13\xf2\x2a\xa9\x36\x0d\xb8\xa5\x32\x9b\x09\x61\x35\x9a\x43\xfd\xe3\x3e\xc4\xa2\x8d\xb1\xe7\xa0\xd8\x93\x30\x5d\x18\xb1\x1d\xa4\x22\x64\x43\xb8\x62\xde\x97\xb4\x8f\x98\xce\xa6\x45\x90\x0e\xce\x2c\x6a\x44\xa3\x89\x14\x25\xe5\x46\x6b\xe0\x48\x67\x37\xdd\x66\x5a\x74\xca\xf4\x69\x21\xfd\x93\xc1\xbb\xa7\x7d\xc2\xc6\x0e\xf6\x52\xdb\x1a\x07\xe4\xd2\x16\x0a\x99\xba\x0f\x91\x0d\xc0\xbd\x05\x16\x44\x73\xd0\x22\x81\x58\x04\xc8\x41\xc1\xb8\x93\x76\x08\x5a\x7c\x63\x0d\xeb\xa4\x47\x85\x6b\x98\x23\x7d\xa0\xa4\x24\xa1\xaf\xea\x35\x68\xcc\x57\x80\xb7\x0a\xe2\xf6\xed\xf6\x83\xc8\x9e\x88\xb8\xb8\x3e\xb1\xde\x67\x3d\x06\x30\xe0\x26\x81\xe1\x43\x56\x63\xd6\x5d\xf2\x09\xc3\xc8\xd3\x98\x61\xcb\x63\xc2\x6e\xd7\xae\x03\xd3\xef\x35\xb8\xed\x1c\x54\x08\xd1\xb8\x8c\xee\x3a\x3a\x5a\x9f\x9a\xfb\x23\x61\x9f\x5b\x1e\x9a\xf9\xb6\x09\x68\x1f\xa5\x47\xd0\x10\x70\xb8\x92\xfc\x9e\xfe\x47\x96\xb5\xe6\x28\x8d\xce\x2e\x12\x77\x64\xe3\x43\x24\x1a\x36\xe4\x2b\x2c\xe6\x86\xdf\x03\x66\x74\xe3\x27\x45\xa1\x0c\x67\xaa\x32\x1e\x27\x57\x61\x15\x7e\x77\x53\xdf\x2c\x8d\x29\x17\xcc\xfd\x53\x7b\x70\x9a\xad\xa1\x64\xda\xe8\xed\xda\xd4\xfe\x38\xdd\x0e\x3f\x37\xda\x58\xd0\xc1\xcd\x68\x20\x71\x29\xb3\xca\x68\xdf\xf0\x20\xf2\x14\xde\xe3\x33\x2e\xb8\x32\x1e\x7e\xd9\xc7\xfe\x8e\xfc\xa6\x9b\x35\x78\xcf\x56\x07\x8e\xa0\xc1\x51\x5f\x9f\x7a\x13\x07\x1c\x64\x03\x62\x42\x28\xf9\x97\x04\xab\x5c\x30\x64\x2f\xfb\x7e\x3c\x6e\x83\x7d\x43\xff\x69\xd1\xe5\x92\x64\xe4\x3c\x94\x7e\x34\xf0\xcf\x06\xc9\x38\x4b\x71\x39\xc0\xda\xe9\x44\x16\x67\x27\xa2\xc3\xf2\x92\x9b\x58\xb2\x24\x6e\xa0\xba\xad\x67\x96\xd4\xc5\x86\xad\x95\x7a\x81\xa5\x78\xb1\xff\x46\x7e\xe2\x98\x25\x7d\x9b\x75\xad\x12\x27\x49\xde\x30\x55\x43\x9a\xaa\x98\x69\xf6\xec\xa1\x13\x62\x76\x99\xb7\xee\x7a\x47\xa9\x3c\xe3\xb4\xb1\xc3\x31\xc5\x1d\x30\x84\x7e\xc8\x65\xd4\xa6\x32\xb6\x79\x1c\xfa\xa1\xc6\x81\xee\x38\x95\x7b\xfc\xeb\xd3\x64\xfb\x21\x97\xc7\x4f\x2d\x6e\x2a\xa9\x44\x66\x8f\x63\x1f\x3e\xb3\xed\x1b\xb2\x7b\x67\xbb\xc7\x35\xbc\xb7\xed\xff\x8f\x9f\x01\x00\x00\xff\xff\xa0\xfd\x81\xa2\x97\x08\x00\x00")

func public_playground_html_bytes() ([]byte, error) {
	return bindata_read(
		_public_playground_html,
		"public/playground.html",
	)
}

func public_playground_html() (*asset, error) {
	bytes, err := public_playground_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "public/playground.html", size: 2199, mode: os.FileMode(420), modTime: time.Unix(1424005314, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _public_style_css = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\xca\x4f\xa9\x54\xa8\x56\x48\xce\xcf\xc9\x2f\xb2\x52\x28\x4a\x4d\xb1\x56\xa8\xe5\x02\x04\x00\x00\xff\xff\x8a\x61\xe7\xa8\x15\x00\x00\x00")

func public_style_css_bytes() ([]byte, error) {
	return bindata_read(
		_public_style_css,
		"public/style.css",
	)
}

func public_style_css() (*asset, error) {
	bytes, err := public_style_css_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "public/style.css", size: 21, mode: os.FileMode(420), modTime: time.Unix(1424012776, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"etc/env.conf": etc_env_conf,
	"public/playground.html": public_playground_html,
	"public/style.css": public_style_css,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"etc": &_bintree_t{nil, map[string]*_bintree_t{
		"env.conf": &_bintree_t{etc_env_conf, map[string]*_bintree_t{
		}},
	}},
	"public": &_bintree_t{nil, map[string]*_bintree_t{
		"playground.html": &_bintree_t{public_playground_html, map[string]*_bintree_t{
		}},
		"style.css": &_bintree_t{public_style_css, map[string]*_bintree_t{
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

